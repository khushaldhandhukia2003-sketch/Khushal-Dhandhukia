{% comment %}
  Product Grid Section
  - Displays 6 selectable products in a grid layout
  - Products are selectable from the theme customizer
  - Clicking on a product opens a popup with product details
{% endcomment %}

<div class="product-grid" id="product-grid">
  <div class="product-grid__container">
    <h2 class="product-grid__title">{{ section.settings.title }}</h2>
    
    <div class="product-grid__items">
      {% for block in section.blocks %}
        {% if block.settings.product != blank %}
          {% assign product = block.settings.product %}
          {% assign current_variant = product.selected_or_first_available_variant %}
          
          <div class="product-grid__item" data-product-id="{{ product.id }}" data-block-id="{{ block.id }}">
            <div class="product-grid__item-inner">
              <div class="product-grid__image-container">
                {% if product.featured_image != blank %}
                  <img 
                    class="product-grid__image" 
                    src="{{ product.featured_image | img_url: '400x400', crop: 'center' }}" 
                    alt="{{ product.featured_image.alt | escape }}" 
                    loading="lazy"
                  >
                {% else %}
                  {{ 'product-1' | placeholder_svg_tag: 'product-grid__image placeholder' }}
                {% endif %}
                <button class="product-grid__quick-view-button" data-product-id="{{ product.id }}" aria-label="Quick view {{ product.title }}">
                  <span class="product-grid__quick-view-icon">+</span>
                </button>
              </div>
              
              <div class="product-grid__info">
                <h3 class="product-grid__product-title">{{ product.title }}</h3>
                <div class="product-grid__price">
                  {% if product.compare_at_price > product.price %}
                    <span class="product-grid__price-sale">{{ product.price | money }}</span>
                    <span class="product-grid__price-compare">{{ product.compare_at_price | money }}</span>
                  {% else %}
                    <span class="product-grid__price-regular">{{ product.price | money }}</span>
                  {% endif %}
                </div>
              </div>
            </div>
          </div>
        {% endif %}
      {% endfor %}
    </div>
  </div>
</div>

<!-- Product Popup -->
<div class="product-popup" id="product-popup">
  <div class="product-popup__overlay" id="product-popup-overlay"></div>
  <div class="product-popup__content">
    <button class="product-popup__close" id="product-popup-close" aria-label="Close popup">&times;</button>
    <div class="product-popup__inner">
      <div class="product-popup__image-container">
        <img class="product-popup__image" id="product-popup-image" src="" alt="">
      </div>
      <div class="product-popup__details">
        <h2 class="product-popup__title" id="product-popup-title"></h2>
        <div class="product-popup__price" id="product-popup-price"></div>
        <div class="product-popup__description" id="product-popup-description"></div>
        
        <form class="product-popup__form" id="product-popup-form">
          <input type="hidden" id="product-popup-id" name="id" value="">
          <input type="hidden" id="product-popup-quantity" name="quantity" value="1">
          
          <div class="product-popup__variants" id="product-popup-variants"></div>
          
          <button type="submit" class="product-popup__add-to-cart" id="product-popup-add-to-cart">
            ADD TO CART
          </button>
        </form>
      </div>
    </div>
  </div>
</div>

<!-- Add to Cart Notification -->
<div class="product-grid__notification" id="product-grid-notification"></div>

<style>
  .product-grid {
    width: 100%;
    padding: 40px 0;
    background-color: white;
  }
  
  .product-grid__container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 20px;
  }
  
  .product-grid__title {
    font-size: 32px;
    font-weight: bold;
    text-align: center;
    margin-bottom: 40px;
    text-transform: uppercase;
  }
  
  .product-grid__items {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 20px;
  }
  
  .product-grid__item {
    position: relative;
    overflow: hidden;
  }
  
  .product-grid__item-inner {
    background-color: white;
    border-radius: 0;
    overflow: hidden;
    transition: transform 0.3s ease, box-shadow 0.3s ease;
  }
  
  .product-grid__item:hover .product-grid__item-inner {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
  }
  
  .product-grid__image-container {
    position: relative;
    padding-bottom: 100%;
    overflow: hidden;
  }
  
  .product-grid__image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.5s ease;
  }
  
  .product-grid__item:hover .product-grid__image {
    transform: scale(1.05);
  }
  
  .product-grid__quick-view-button {
    position: absolute;
    top: 10px;
    right: 10px;
    width: 30px;
    height: 30px;
    border-radius: 50%;
    background-color: white;
    border: none;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    opacity: 0;
    transform: translateY(10px);
    transition: opacity 0.3s ease, transform 0.3s ease;
    z-index: 2;
  }
  
  .product-grid__item:hover .product-grid__quick-view-button {
    opacity: 1;
    transform: translateY(0);
  }
  
  .product-grid__quick-view-icon {
    font-size: 20px;
    line-height: 1;
  }
  
  .product-grid__info {
    padding: 15px;
  }
  
  .product-grid__product-title {
    font-size: 16px;
    font-weight: 500;
    margin-bottom: 8px;
  }
  
  .product-grid__price {
    display: flex;
    align-items: center;
    gap: 8px;
  }
  
  .product-grid__price-sale {
    font-weight: bold;
    color: #e53935;
  }
  
  .product-grid__price-compare {
    text-decoration: line-through;
    color: #999;
    font-size: 14px;
  }
  
  .product-grid__price-regular {
    font-weight: bold;
  }
  
  /* Product Popup Styles */
  .product-popup {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    opacity: 0;
    visibility: hidden;
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }
  
  .product-popup.active {
    opacity: 1;
    visibility: visible;
  }
  
  .product-popup__overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    cursor: pointer;
  }
  
  .product-popup__content {
    position: relative;
    width: 90%;
    max-width: 900px;
    max-height: 90vh;
    background-color: white;
    border-radius: 4px;
    overflow: auto;
    transform: translateY(20px);
    transition: transform 0.3s ease;
    z-index: 1;
  }
  
  .product-popup.active .product-popup__content {
    transform: translateY(0);
  }
  
  .product-popup__close {
    position: absolute;
    top: 15px;
    right: 15px;
    font-size: 28px;
    background: none;
    border: none;
    cursor: pointer;
    z-index: 2;
  }
  
  .product-popup__inner {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
    padding: 30px;
  }
  
  .product-popup__image-container {
    position: relative;
    padding-bottom: 100%;
    overflow: hidden;
  }
  
  .product-popup__image {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .product-popup__title {
    font-size: 24px;
    font-weight: bold;
    margin-bottom: 10px;
  }
  
  .product-popup__price {
    font-size: 20px;
    font-weight: bold;
    margin-bottom: 15px;
  }
  
  .product-popup__description {
    margin-bottom: 20px;
    color: #666;
    line-height: 1.5;
  }
  
  .product-popup__variants {
    margin-bottom: 20px;
  }
  
  .product-popup__variant-group {
    margin-bottom: 15px;
  }
  
  .product-popup__variant-label {
    display: block;
    font-weight: bold;
    margin-bottom: 8px;
  }
  
  .product-popup__variant-options {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
  }
  
  .product-popup__variant-option {
    padding: 8px 15px;
    border: 1px solid #ddd;
    cursor: pointer;
    transition: all 0.2s ease;
  }
  
  .product-popup__variant-option:hover {
    border-color: #999;
  }
  
  .product-popup__variant-option.selected {
    background-color: #000;
    color: white;
    border-color: #000;
  }
  
  .product-popup__add-to-cart {
    width: 100%;
    padding: 12px;
    background-color: #000;
    color: white;
    border: none;
    font-weight: bold;
    cursor: pointer;
    transition: background-color 0.3s ease;
    text-transform: uppercase;
  }
  
  .product-popup__add-to-cart:hover {
    background-color: #333;
  }
  
  /* Add to Cart Notification */
  .product-grid__notification {
    position: fixed;
    bottom: 20px;
    right: 20px;
    background-color: #4CAF50;
    color: white;
    padding: 15px 20px;
    border-radius: 4px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    z-index: 1100;
    transform: translateY(100px);
    opacity: 0;
    transition: transform 0.3s ease, opacity 0.3s ease;
  }
  
  .product-grid__notification.active {
    transform: translateY(0);
    opacity: 1;
  }
  
  /* Responsive Styles */
  @media (max-width: 768px) {
    .product-grid__items {
      grid-template-columns: repeat(2, 1fr);
    }
    
    .product-popup__inner {
      grid-template-columns: 1fr;
      gap: 20px;
    }
    
    .product-popup__image-container {
      padding-bottom: 75%;
    }
  }
  
  @media (max-width: 480px) {
    .product-grid__items {
      grid-template-columns: 1fr;
    }
    
    .product-popup__content {
      width: 95%;
    }
    
    .product-popup__inner {
      padding: 20px;
    }
    
    .product-grid__notification {
      left: 20px;
      right: 20px;
      text-align: center;
    }
  }
</style>

<script>
  class ProductGrid {
    constructor() {
      this.grid = document.getElementById('product-grid');
      if (!this.grid) return;
      
      this.popup = document.getElementById('product-popup');
      this.popupOverlay = document.getElementById('product-popup-overlay');
      this.popupClose = document.getElementById('product-popup-close');
      this.popupImage = document.getElementById('product-popup-image');
      this.popupTitle = document.getElementById('product-popup-title');
      this.popupPrice = document.getElementById('product-popup-price');
      this.popupDescription = document.getElementById('product-popup-description');
      this.popupVariants = document.getElementById('product-popup-variants');
      this.popupForm = document.getElementById('product-popup-form');
      this.popupProductId = document.getElementById('product-popup-id');
      this.popupAddToCart = document.getElementById('product-popup-add-to-cart');
      
      this.quickViewButtons = this.grid.querySelectorAll('.product-grid__quick-view-button');
      this.notification = document.getElementById('product-grid-notification');
      
      this.init();
    }
    
    init() {
      // Initialize quick view buttons
      this.quickViewButtons.forEach(button => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          const productId = button.getAttribute('data-product-id');
          this.openProductPopup(productId);
        });
      });
      
      // Close popup events
      if (this.popupClose) {
        this.popupClose.addEventListener('click', () => this.closeProductPopup());
      }
      
      if (this.popupOverlay) {
        this.popupOverlay.addEventListener('click', () => this.closeProductPopup());
      }
      
      // Add to cart form submission
      if (this.popupForm) {
        this.popupForm.addEventListener('submit', (e) => this.handleAddToCart(e));
      }
    }
    
    async openProductPopup(productId) {
      try {
        const response = await fetch(`/products/${productId}.js`);
        const product = await response.json();
        
        if (!product) return;
        
        // Set product details in popup
        this.popupImage.src = product.featured_image ? product.featured_image : '';
        this.popupImage.alt = product.title;
        this.popupTitle.textContent = product.title;
        
        // Set price
        const variant = product.variants[0];
        const formattedPrice = this.formatMoney(variant.price);
        this.popupPrice.textContent = formattedPrice;
        
        // Set description
        this.popupDescription.innerHTML = product.description;
        
        // Set product ID for add to cart
        this.popupProductId.value = variant.id;
        
        // Render variants
        this.renderVariants(product);
        
        // Show popup
        this.popup.classList.add('active');
        document.body.style.overflow = 'hidden';
      } catch (error) {
        console.error('Error fetching product data:', error);
      }
    }
    
    closeProductPopup() {
      this.popup.classList.remove('active');
      document.body.style.overflow = '';
    }
    
    renderVariants(product) {
      this.popupVariants.innerHTML = '';
      
      // Get all option names
      const options = product.options;
      
      options.forEach((option, optionIndex) => {
        const optionName = option.name;
        const optionValues = option.values;
        
        // Create variant group
        const variantGroup = document.createElement('div');
        variantGroup.classList.add('product-popup__variant-group');
        
        // Create label
        const label = document.createElement('label');
        label.classList.add('product-popup__variant-label');
        label.textContent = optionName;
        variantGroup.appendChild(label);
        
        // Create options container
        const optionsContainer = document.createElement('div');
        optionsContainer.classList.add('product-popup__variant-options');
        
        // Create option buttons
        optionValues.forEach(value => {
          const optionButton = document.createElement('div');
          optionButton.classList.add('product-popup__variant-option');
          optionButton.setAttribute('data-option-index', optionIndex);
          optionButton.setAttribute('data-value', value);
          optionButton.textContent = value;
          
          // Select first option by default
          if (optionValues.indexOf(value) === 0) {
            optionButton.classList.add('selected');
          }
          
          optionButton.addEventListener('click', () => this.handleVariantSelection(optionButton, optionIndex, value, product));
          
          optionsContainer.appendChild(optionButton);
        });
        
        variantGroup.appendChild(optionsContainer);
        this.popupVariants.appendChild(variantGroup);
      });
    }
    
    handleVariantSelection(optionButton, optionIndex, value, product) {
      // Update selected state
      const optionsInGroup = optionButton.parentElement.querySelectorAll('.product-popup__variant-option');
      optionsInGroup.forEach(option => option.classList.remove('selected'));
      optionButton.classList.add('selected');
      
      // Get all selected options
      const selectedOptions = [];
      const variantGroups = this.popupVariants.querySelectorAll('.product-popup__variant-group');
      
      variantGroups.forEach(group => {
        const selectedOption = group.querySelector('.product-popup__variant-option.selected');
        if (selectedOption) {
          selectedOptions.push(selectedOption.getAttribute('data-value'));
        }
      });
      
      // Find matching variant
      const matchingVariant = product.variants.find(variant => {
        return product.options.every((option, index) => {
          return variant.options[index] === selectedOptions[index];
        });
      });
      
      if (matchingVariant) {
        // Update price
        this.popupPrice.textContent = this.formatMoney(matchingVariant.price);
        
        // Update form value
        this.popupProductId.value = matchingVariant.id;
      }
    }
    
    async handleAddToCart(e) {
      e.preventDefault();
      
      const variantId = this.popupProductId.value;
      const quantity = 1;
      const productTitle = this.popupTitle.textContent;
      
      try {
        // Get selected variant options to check for Black + Medium combination
        const selectedOptions = [];
        const variantGroups = this.popupVariants.querySelectorAll('.product-popup__variant-group');
        
        variantGroups.forEach(group => {
          const selectedOption = group.querySelector('.product-popup__variant-option.selected');
          if (selectedOption) {
            selectedOptions.push(selectedOption.getAttribute('data-value'));
          }
        });
        
        // Check if Black + Medium combination is selected
        const hasBlack = selectedOptions.includes('Black');
        const hasMedium = selectedOptions.includes('Medium');
        const shouldAddWinterJacket = hasBlack && hasMedium;
        
        // Add the selected product to cart
        const formData = {
          items: [
            {
              id: variantId,
              quantity: quantity
            }
          ]
        };
        
        // Add to cart
        const response = await fetch('/cart/add.js', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(formData)
        });
        
        const result = await response.json();
        
        // If Black + Medium combination, add Winter Jacket
        if (shouldAddWinterJacket) {
          // Fetch the Winter Jacket product
          const winterJacketHandle = 'soft-winter-jacket'; // Replace with actual handle
          try {
            const winterJacketResponse = await fetch(`/products/${winterJacketHandle}.js`);
            const winterJacketProduct = await winterJacketResponse.json();
            
            if (winterJacketProduct && winterJacketProduct.variants.length > 0) {
              // Add the first variant of Winter Jacket to cart
              const winterJacketData = {
                items: [{
                  id: winterJacketProduct.variants[0].id,
                  quantity: 1
                }]
              };
              
              const winterJacketResponse = await fetch('/cart/add.js', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json'
                },
                body: JSON.stringify(winterJacketData)
              });
              
              // Close popup and show success message with winter jacket
              this.closeProductPopup();
              this.showAddToCartNotification(true, productTitle);
              return;
            }
          } catch (winterJacketError) {
            console.error('Error adding winter jacket:', winterJacketError);
          }
        }
        
        // Close popup and show success message
        this.closeProductPopup();
        this.showAddToCartNotification(false, productTitle);
        
      } catch (error) {
        console.error('Error adding to cart:', error);
        this.showAddToCartError();
      }
    }
    
    showAddToCartNotification(addedWinterJacket, productTitle) {
      if (!this.notification) {
        // Create notification element if it doesn't exist
        this.notification = document.createElement('div');
        this.notification.classList.add('product-grid__notification');
        document.body.appendChild(this.notification);
      }
      
      if (addedWinterJacket) {
        this.notification.textContent = `${productTitle} and Winter Jacket added to cart!`;
      } else {
        this.notification.textContent = `${productTitle} added to cart!`;
      }
      
      // Show notification
      this.notification.classList.add('active');
      
      // Remove after delay
      setTimeout(() => {
        this.notification.classList.remove('active');
      }, 3000);
    }
    
    showAddToCartError() {
      if (!this.notification) {
        // Create notification element if it doesn't exist
        this.notification = document.createElement('div');
        this.notification.classList.add('product-grid__notification');
        this.notification.style.backgroundColor = '#e53935'; // Red color for error
        document.body.appendChild(this.notification);
      }
      
      this.notification.textContent = 'Error adding product to cart. Please try again.';
      
      // Show notification
      this.notification.classList.add('active');
      
      // Remove after delay
      setTimeout(() => {
        this.notification.classList.remove('active');
      }, 3000);
    }
    
    formatMoney(cents) {
      const value = (cents / 100).toFixed(2);
      return `$${value}`;
    }
  }
  
  // Initialize on DOM content loaded
  document.addEventListener('DOMContentLoaded', () => {
    new ProductGrid();
  });
</script>

{% schema %}
{
  "name": "Product Grid",
  "settings": [
    {
      "type": "text",
      "id": "title",
      "label": "Section Title",
      "default": "Tisso vision in the wild"
    }
  ],
  "blocks": [
    {
      "type": "product",
      "name": "Product",
      "limit": 6,
      "settings": [
        {
          "type": "product",
          "id": "product",
          "label": "Product"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Product Grid",
      "category": "Custom",
      "blocks": [
        {
          "type": "product"
        },
        {
          "type": "product"
        },
        {
          "type": "product"
        },
        {
          "type": "product"
        },
        {
          "type": "product"
        },
        {
          "type": "product"
        }
      ]
    }
  ]
}
{% endschema %}