{% comment %}
  Modern Product Grid Section
  Features:
  - Exactly 6 product blocks
  - Responsive grid layout (3 columns desktop, 2 columns mobile)
  - Product picker for each block OR collection picker
  - Quick view functionality
  - Product image, title, price display
  - Special cart logic for Black + Medium variant
  - Support for CSV-imported products
  - Modern card design with enhanced effects
{% endcomment %}

{% include 'popup-product' %}

<div class="modern-grid">
  <div class="modern-grid__container">
    {% if section.settings.heading != blank %}
      <div class="modern-grid__header">
        <h2 class="modern-grid__heading">{{ section.settings.heading }}</h2>
        {% if section.settings.subheading != blank %}
          <p class="modern-grid__subheading">{{ section.settings.subheading }}</p>
        {% endif %}
      </div>
    {% endif %}
    
    <div class="modern-grid__products">
      {% comment %} Check if we're using a collection or individual products {% endcomment %}
      {% if section.settings.use_collection and section.settings.collection != blank %}
        {% comment %} Display products from selected collection {% endcomment %}
        {% assign collection = collections[section.settings.collection] %}
        {% assign products_to_show = collection.products | slice: 0, 6 %}
        
        {% for product in products_to_show %}
          <div class="modern-product-card" data-product-id="{{ product.id }}">
            <div class="modern-product-card__image-container">
              {% if product.featured_image %}
                <img src="{{ product.featured_image | img_url: '400x400', crop: 'center' }}" 
                     alt="{{ product.title }}"
                     loading="lazy"
                     class="modern-product-card__image">
              {% else %}
                <div class="modern-product-card__no-image">
                  <svg width="60" height="60" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                    <circle cx="8.5" cy="8.5" r="1.5"></circle>
                    <polyline points="21,15 16,10 5,21"></polyline>
                  </svg>
                  <span>No Image</span>
                </div>
              {% endif %}
              
              <div class="modern-product-card__overlay">
                <div class="modern-product-card__actions">
                  <button class="modern-product-card__quick-view" 
                          onclick="openProductPopup({{ product | json }})">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                      <circle cx="12" cy="12" r="3"></circle>
                    </svg>
                    Quick View
                  </button>
                  
                  <a href="{{ product.url }}" class="modern-product-card__view-details">
                    <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M5 12h14"></path>
                      <path d="m12 5 7 7-7 7"></path>
                    </svg>
                    View Details
                  </a>
                </div>
              </div>
              
              {% if product.compare_at_price > product.price %}
                <div class="modern-product-card__badge modern-product-card__badge--sale">
                  Sale
                </div>
              {% endif %}
            </div>
            
            <div class="modern-product-card__content">
              <h3 class="modern-product-card__title">
                <a href="{{ product.url }}">{{ product.title }}</a>
              </h3>
              
              <div class="modern-product-card__price">
                {% if product.compare_at_price > product.price %}
                  <span class="modern-product-card__price-current">{{ product.price | money }}</span>
                  <span class="modern-product-card__price-original">{{ product.compare_at_price | money }}</span>
                {% else %}
                  <span class="modern-product-card__price-current">{{ product.price | money }}</span>
                {% endif %}
              </div>
              
              <div class="modern-product-card__status">
                {% if product.available %}
                  <span class="modern-product-card__status-available">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M20 6 9 17l-5-5"></path>
                    </svg>
                    In Stock
                  </span>
                {% else %}
                  <span class="modern-product-card__status-unavailable">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M18 6 6 18"></path>
                      <path d="m6 6 12 12"></path>
                    </svg>
                    Out of Stock
                  </span>
                {% endif %}
              </div>
            </div>
          </div>
        {% endfor %}
        
        {% comment %} Fill remaining slots if collection has fewer than 6 products {% endcomment %}
        {% assign remaining_slots = 6 | minus: products_to_show.size %}
        {% for i in (1..remaining_slots) %}
          <div class="modern-product-card modern-product-card--empty">
            <div class="modern-product-card__placeholder">
              <svg width="60" height="60" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
              </svg>
              <p>No more products in collection</p>
            </div>
          </div>
        {% endfor %}
        
      {% else %}
        {% comment %} Display individually selected products {% endcomment %}
        {% for i in (1..6) %}
          {% assign product_key = 'product_' | append: i %}
          {% assign product = all_products[section.settings[product_key]] %}
          
          {% if product != blank %}
            <div class="modern-product-card" data-product-id="{{ product.id }}">
              <div class="modern-product-card__image-container">
                {% if product.featured_image %}
                  <img src="{{ product.featured_image | img_url: '400x400', crop: 'center' }}" 
                       alt="{{ product.title }}"
                       loading="lazy"
                       class="modern-product-card__image">
                {% else %}
                  <div class="modern-product-card__no-image">
                    <svg width="60" height="60" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                      <circle cx="8.5" cy="8.5" r="1.5"></circle>
                      <polyline points="21,15 16,10 5,21"></polyline>
                    </svg>
                    <span>No Image</span>
                  </div>
                {% endif %}
                
                <div class="modern-product-card__overlay">
                  <div class="modern-product-card__actions">
                    <button class="modern-product-card__quick-view" 
                            onclick="openProductPopup({{ product | json }})">
                      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                        <circle cx="12" cy="12" r="3"></circle>
                      </svg>
                      Quick View
                    </button>
                    
                    <a href="{{ product.url }}" class="modern-product-card__view-details">
                      <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M5 12h14"></path>
                        <path d="m12 5 7 7-7 7"></path>
                      </svg>
                      View Details
                    </a>
                  </div>
                </div>
                
                {% if product.compare_at_price > product.price %}
                  <div class="modern-product-card__badge modern-product-card__badge--sale">
                    Sale
                  </div>
                {% endif %}
              </div>
              
              <div class="modern-product-card__content">
                <h3 class="modern-product-card__title">
                  <a href="{{ product.url }}">{{ product.title }}</a>
                </h3>
                
                <div class="modern-product-card__price">
                  {% if product.compare_at_price > product.price %}
                    <span class="modern-product-card__price-current">{{ product.price | money }}</span>
                    <span class="modern-product-card__price-original">{{ product.compare_at_price | money }}</span>
                  {% else %}
                    <span class="modern-product-card__price-current">{{ product.price | money }}</span>
                  {% endif %}
                </div>
                
                <div class="modern-product-card__status">
                  {% if product.available %}
                    <span class="modern-product-card__status-available">
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M20 6 9 17l-5-5"></path>
                      </svg>
                      In Stock
                    </span>
                  {% else %}
                    <span class="modern-product-card__status-unavailable">
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M18 6 6 18"></path>
                        <path d="m6 6 12 12"></path>
                      </svg>
                      Out of Stock
                    </span>
                  {% endif %}
                </div>
              </div>
            </div>
          {% else %}
            <!-- Empty product block for theme editor -->
            <div class="modern-product-card modern-product-card--empty">
              <div class="modern-product-card__placeholder">
                <svg width="60" height="60" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                  <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
                </svg>
                <p>Select a product for block {{ i }}</p>
              </div>
            </div>
          {% endif %}
        {% endfor %}
      {% endif %}
    </div>
  </div>
</div>

<style>
  .modern-grid {
    padding: 80px 20px;
    background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    min-height: 100vh;
  }
  
  .modern-grid__container {
    max-width: 1200px;
    margin: 0 auto;
  }
  
  .modern-grid__header {
    text-align: center;
    margin-bottom: 60px;
  }
  
  .modern-grid__heading {
    font-size: clamp(2rem, 4vw, 3rem);
    font-weight: 800;
    margin: 0 0 20px 0;
    color: #1a202c;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
    letter-spacing: -0.02em;
  }
  
  .modern-grid__subheading {
    font-size: clamp(1.1rem, 2vw, 1.3rem);
    color: #4a5568;
    margin: 0;
    font-weight: 400;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
    line-height: 1.6;
  }
  
  .modern-grid__products {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 30px;
    max-width: 1200px;
    margin: 0 auto;
  }
  
  .modern-product-card {
    background: white;
    border-radius: 20px;
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    border: 1px solid rgba(255, 255, 255, 0.2);
  }
  
  .modern-product-card:hover {
    transform: translateY(-10px);
    box-shadow: 0 20px 50px rgba(0, 0, 0, 0.15);
  }
  
  .modern-product-card__image-container {
    position: relative;
    aspect-ratio: 1;
    overflow: hidden;
    background: #f7fafc;
  }
  
  .modern-product-card__image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.4s ease;
  }
  
  .modern-product-card:hover .modern-product-card__image {
    transform: scale(1.1);
  }
  
  .modern-product-card__no-image {
    width: 100%;
    height: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    color: #a0aec0;
    font-size: 0.9rem;
    gap: 10px;
  }
  
  .modern-product-card__overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, rgba(102, 126, 234, 0.9) 0%, rgba(118, 75, 162, 0.9) 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    transition: opacity 0.3s ease;
  }
  
  .modern-product-card:hover .modern-product-card__overlay {
    opacity: 1;
  }
  
  .modern-product-card__actions {
    display: flex;
    flex-direction: column;
    gap: 15px;
    align-items: center;
  }
  
  .modern-product-card__quick-view,
  .modern-product-card__view-details {
    background: white;
    color: #667eea;
    border: none;
    padding: 12px 24px;
    border-radius: 25px;
    font-weight: 600;
    font-size: 14px;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
    display: flex;
    align-items: center;
    gap: 8px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
  }
  
  .modern-product-card__quick-view:hover,
  .modern-product-card__view-details:hover {
    background: #667eea;
    color: white;
    transform: scale(1.05);
    box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
  }
  
  .modern-product-card__badge {
    position: absolute;
    top: 15px;
    right: 15px;
    padding: 6px 12px;
    border-radius: 15px;
    font-size: 12px;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }
  
  .modern-product-card__badge--sale {
    background: linear-gradient(135deg, #ff6b6b 0%, #ee5a52 100%);
    color: white;
    box-shadow: 0 4px 15px rgba(255, 107, 107, 0.4);
  }
  
  .modern-product-card__content {
    padding: 25px;
  }
  
  .modern-product-card__title {
    margin: 0 0 15px 0;
    font-size: 1.2rem;
    font-weight: 700;
    line-height: 1.3;
  }
  
  .modern-product-card__title a {
    color: #2d3748;
    text-decoration: none;
    transition: color 0.3s ease;
  }
  
  .modern-product-card__title a:hover {
    color: #667eea;
  }
  
  .modern-product-card__price {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-bottom: 15px;
  }
  
  .modern-product-card__price-current {
    font-size: 1.3rem;
    font-weight: 700;
    color: #667eea;
  }
  
  .modern-product-card__price-original {
    font-size: 1rem;
    color: #a0aec0;
    text-decoration: line-through;
  }
  
  .modern-product-card__status {
    display: flex;
    align-items: center;
    gap: 6px;
  }
  
  .modern-product-card__status-available,
  .modern-product-card__status-unavailable {
    font-size: 0.85rem;
    font-weight: 600;
    padding: 4px 8px;
    border-radius: 12px;
    display: flex;
    align-items: center;
    gap: 4px;
  }
  
  .modern-product-card__status-available {
    background: #c6f6d5;
    color: #22543d;
  }
  
  .modern-product-card__status-unavailable {
    background: #fed7d7;
    color: #742a2a;
  }
  
  /* Empty product card styling */
  .modern-product-card--empty {
    border: 2px dashed #e2e8f0;
    background: #f7fafc;
  }
  
  .modern-product-card__placeholder {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 100%;
    padding: 60px 20px;
    text-align: center;
    color: #a0aec0;
    gap: 15px;
  }
  
  .modern-product-card__placeholder p {
    margin: 0;
    font-size: 0.9rem;
  }
  
  /* Mobile Responsive */
  @media (max-width: 768px) {
    .modern-grid {
      padding: 60px 15px;
    }
    
    .modern-grid__header {
      margin-bottom: 40px;
    }
    
    .modern-grid__products {
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
      gap: 20px;
    }
    
    .modern-product-card__content {
      padding: 20px;
    }
    
    .modern-product-card__title {
      font-size: 1.1rem;
    }
    
    .modern-product-card__price-current {
      font-size: 1.2rem;
    }
  }
  
  @media (max-width: 480px) {
    .modern-grid__products {
      grid-template-columns: 1fr;
      gap: 15px;
    }
    
    .modern-product-card__content {
      padding: 15px;
    }
  }
</style>

<script>
  // Enhanced cart functionality with better error handling
  async function addToCart(variantId, quantity) {
    try {
      // Show loading state
      const addToCartButton = document.querySelector('.modern-popup__add-to-cart');
      const originalText = addToCartButton.textContent;
      addToCartButton.textContent = 'Adding...';
      addToCartButton.disabled = true;
      
      const response = await fetch('/cart/add.js', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          id: variantId,
          quantity: quantity
        })
      });
      
      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.description || 'Failed to add to cart');
      }
      
      const result = await response.json();
      
      // Check if we need to add the "Soft Winter Jacket" automatically
      await checkAndAddSoftWinterJacket(result);
      
      // Close popup
      closeProductPopup();
      
      // Show success message
      showNotification('Product added to cart!', 'success');
      
      // Update cart count (if you have a cart counter)
      updateCartCount();
      
    } catch (error) {
      console.error('Error adding to cart:', error);
      showNotification(error.message || 'Failed to add product to cart', 'error');
    } finally {
      // Reset button state
      const addToCartButton = document.querySelector('.modern-popup__add-to-cart');
      addToCartButton.textContent = 'Add to Cart';
      addToCartButton.disabled = false;
    }
  }
  
  // Enhanced check and add Soft Winter Jacket logic
  async function checkAndAddSoftWinterJacket(addedProduct) {
    try {
      // Get the added product details
      const productResponse = await fetch(`/products/${addedProduct.handle}.js`);
      if (!productResponse.ok) {
        throw new Error('Failed to fetch product details');
      }
      
      const product = await productResponse.json();
      
      // Check if the added product has variant "Black + Medium"
      const blackMediumVariant = product.variants.find(variant => {
        return variant.option1 === 'Black' && variant.option2 === 'Medium';
      });
      
      if (blackMediumVariant && addedProduct.variant_id === blackMediumVariant.id) {
        // Find the Soft Winter Jacket product
        const softWinterJacketResponse = await fetch('/products/soft-winter-jacket.js');
        if (!softWinterJacketResponse.ok) {
          console.warn('Soft Winter Jacket product not found');
          return;
        }
        
        const softWinterJacket = await softWinterJacketResponse.json();
        
        if (softWinterJacket) {
          // Check if Soft Winter Jacket is already in cart
          const cartResponse = await fetch('/cart.js');
          if (!cartResponse.ok) {
            throw new Error('Failed to fetch cart');
          }
          
          const cart = await cartResponse.json();
          
          const existingItem = cart.items.find(item => item.product_id === softWinterJacket.id);
          
          if (existingItem) {
            // Update quantity
            const updateResponse = await fetch('/cart/change.js', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                id: existingItem.key,
                quantity: existingItem.quantity + 1
              })
            });
            
            if (!updateResponse.ok) {
              throw new Error('Failed to update Soft Winter Jacket quantity');
            }
          } else {
            // Add to cart
            const addResponse = await fetch('/cart/add.js', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                id: softWinterJacket.variants[0].id,
                quantity: 1
              })
            });
            
            if (!addResponse.ok) {
              throw new Error('Failed to add Soft Winter Jacket to cart');
            }
          }
          
          showNotification('Soft Winter Jacket automatically added to cart!', 'success');
        }
      }
    } catch (error) {
      console.error('Error checking for Soft Winter Jacket:', error);
      // Don't show error to user for this automatic addition
    }
  }
  
  // Enhanced notification system
  function showNotification(message, type = 'info') {
    // Remove existing notifications
    const existingNotifications = document.querySelectorAll('.notification');
    existingNotifications.forEach(notification => {
      notification.remove();
    });
    
    // Create notification element
    const notification = document.createElement('div');
    notification.className = `notification notification--${type}`;
    notification.innerHTML = `
      <div class="notification__content">
        <span class="notification__message">${message}</span>
        <button class="notification__close" onclick="this.parentElement.parentElement.remove()">×</button>
      </div>
    `;
    
    // Add styles
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 0;
      border-radius: 12px;
      color: white;
      font-weight: 600;
      z-index: 10000;
      transform: translateX(100%);
      transition: transform 0.3s ease;
      max-width: 350px;
      box-shadow: 0 8px 30px rgba(0, 0, 0, 0.15);
      backdrop-filter: blur(10px);
      ${type === 'success' ? 'background: linear-gradient(135deg, #48bb78 0%, #38a169 100%);' : ''}
      ${type === 'error' ? 'background: linear-gradient(135deg, #f56565 0%, #e53e3e 100%);' : ''}
      ${type === 'info' ? 'background: linear-gradient(135deg, #4299e1 0%, #3182ce 100%);' : ''}
    `;
    
    // Add inner content styles
    const content = notification.querySelector('.notification__content');
    content.style.cssText = `
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 15px 20px;
    `;
    
    const closeButton = notification.querySelector('.notification__close');
    closeButton.style.cssText = `
      background: none;
      border: none;
      color: white;
      font-size: 18px;
      cursor: pointer;
      margin-left: 10px;
      padding: 0;
      width: 20px;
      height: 20px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      transition: background-color 0.3s ease;
    `;
    
    closeButton.addEventListener('mouseenter', () => {
      closeButton.style.backgroundColor = 'rgba(255, 255, 255, 0.2)';
    });
    
    closeButton.addEventListener('mouseleave', () => {
      closeButton.style.backgroundColor = 'transparent';
    });
    
    document.body.appendChild(notification);
    
    // Animate in
    setTimeout(() => {
      notification.style.transform = 'translateX(0)';
    }, 100);
    
    // Auto remove after 5 seconds
    setTimeout(() => {
      if (notification.parentElement) {
        notification.style.transform = 'translateX(100%)';
        setTimeout(() => {
          if (notification.parentElement) {
            notification.remove();
          }
        }, 300);
      }
    }, 5000);
  }
  
  // Update cart count (placeholder function)
  function updateCartCount() {
    // This function would update your cart counter
    // Implementation depends on your theme's cart structure
    console.log('Cart updated');
    
    // Example: Update cart bubble if it exists
    const cartBubble = document.querySelector('.cart-bubble');
    if (cartBubble) {
      // Fetch current cart count and update
      fetch('/cart.js')
        .then(response => response.json())
        .then(cart => {
          const itemCount = cart.item_count;
          cartBubble.textContent = itemCount;
          cartBubble.style.display = itemCount > 0 ? 'block' : 'none';
        })
        .catch(error => console.error('Error updating cart count:', error));
    }
  }
</script>

{% schema %}
{
  "name": "Modern Product Grid",
  "settings": [
    {
      "type": "text",
      "id": "heading",
      "label": "Section Heading",
      "default": "Featured Products"
    },
    {
      "type": "text",
      "id": "subheading",
      "label": "Section Subheading",
      "default": "Discover our latest collection"
    },
    {
      "type": "header",
      "content": "Product Selection"
    },
    {
      "type": "checkbox",
      "id": "use_collection",
      "label": "Use Collection Instead of Individual Products",
      "default": false,
      "info": "Select this to display products from a collection instead of individually selected products"
    },
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection",
      "info": "Select a collection to display its first 6 products"
    },
    {
      "type": "header",
      "content": "Individual Products (if not using collection)"
    },
    {
      "type": "product",
      "id": "product_1",
      "label": "Product 1"
    },
    {
      "type": "product",
      "id": "product_2",
      "label": "Product 2"
    },
    {
      "type": "product",
      "id": "product_3",
      "label": "Product 3"
    },
    {
      "type": "product",
      "id": "product_4",
      "label": "Product 4"
    },
    {
      "type": "product",
      "id": "product_5",
      "label": "Product 5"
    },
    {
      "type": "product",
      "id": "product_6",
      "label": "Product 6"
    }
  ],
  "presets": [
    {
      "name": "Modern Product Grid",
      "category": "Custom Sections"
    }
  ]
}
{% endschema %}
